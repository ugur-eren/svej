generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SVEJ_DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  fullname  String?
  password  String
  bio       String?
  jtis      String[]
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profilePhoto         Media?         @relation("ProfilePhoto", fields: [profilePhotoId], references: [id])
  profilePhotoId       String?
  coverPhoto           Media?         @relation("CoverPhoto", fields: [coverPhotoId], references: [id])
  coverPhotoId         String?
  tags                 UserTag[]      @relation("UserTags")
  followers            User[]         @relation("UserFollows")
  follows              User[]         @relation("UserFollows")
  posts                Post[]         @relation("UserPosts")
  postLikes            Post[]         @relation("PostLikes")
  postDislikes         Post[]         @relation("PostDislikes")
  comments             Comment[]      @relation("UserComments")
  commentLikes         Comment[]      @relation("CommentLikes")
  commentDislikes      Comment[]      @relation("CommentDislikes")
  relatedNotifications Notification[] @relation("NotificationUser")
  ownedNotifications   Notification[] @relation("NotificationOwner")
  chatMessageSent      ChatMessage[]  @relation("ChatMessageFrom")
  chatMessageReceived  ChatMessage[]  @relation("ChatMessageTo")
}

model Post {
  id          String   @id @default(uuid())
  description String?
  medias      Media[]
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author        User           @relation("UserPosts", fields: [authorId], references: [id])
  authorId      String
  likes         User[]         @relation("PostLikes")
  dislikes      User[]         @relation("PostDislikes")
  comments      Comment[]      @relation("PostComments")
  notifications Notification[] @relation("NotificationPost")
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author        User           @relation("UserComments", fields: [authorId], references: [id])
  authorId      String
  post          Post           @relation("PostComments", fields: [postId], references: [id])
  postId        String
  likes         User[]         @relation("CommentLikes")
  dislikes      User[]         @relation("CommentDislikes")
  notifications Notification[] @relation("NotificationComment")
}

model UserTag {
  id        String   @id @default(uuid())
  icon      String
  name      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users User[] @relation("UserTags")
}

model Media {
  id        String    @id @default(uuid())
  type      MediaType
  fileKey   String
  width     Int
  height    Int
  thumbnail String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  profilePhoto User[]  @relation("ProfilePhoto")
  coverPhoto   User[]  @relation("CoverPhoto")
  post         Post?   @relation(fields: [postId], references: [id])
  postId       String?
}

model Warning {
  id            String         @id @default(uuid())
  text          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[] @relation("NotificationWarning")
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  owner     User     @relation("NotificationOwner", fields: [ownerId], references: [id])
  ownerId   String
  user      User     @relation("NotificationUser", fields: [userId], references: [id])
  userId    String
  comment   Comment? @relation("NotificationComment", fields: [commentId], references: [id])
  commentId String?
  post      Post?    @relation("NotificationPost", fields: [postId], references: [id])
  postId    String?
  warning   Warning? @relation("NotificationWarning", fields: [warningId], references: [id])
  warningId String?
}

model ChatMessage {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  from   User   @relation("ChatMessageFrom", fields: [fromId], references: [id])
  fromId String
  to     User   @relation("ChatMessageTo", fields: [toId], references: [id])
  toId   String
}

enum NotificationType {
  COMMENT
  FOLLOW
  UNFOLLOW
  POST_LIKE
  POST_TAG
  COMMENT_TAG
  WARNING
}

enum MediaType {
  IMAGE
  VIDEO
}
